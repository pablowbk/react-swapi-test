{"version":3,"sources":["CardComponent.js","CardContainer.js","NavBar.js","Header.js","Loader.js","About.js","App.js","serviceWorker.js","index.js"],"names":["CardComponent","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","species","films","_this2","fetch","props","then","resp","json","setState","name","catch","err","console","log","filmsArray","fetchFilms","map","filmUrl","i","res","data","push","concat","episode_id","title","sort","Promise","all","promisesArray","react_default","a","createElement","className","film","key","Component","CardContainer","_ref","cardList","user","src_CardComponent","url","navLiStyles","listStyleType","NavBar","style","onClick","handleClick","Header","Loader","About","visibility","display","href","target","rel","App","api_data","isVisible","handleAboutClick","bind","assertThisInitialized","urlsArray","toString","charsData","charsFetch","results","event","_this$state","src_NavBar","src_Header","length","src_Loader","src_CardContainer","src_About","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mQAgEeA,oBAzDb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CACXC,QAAS,CAAC,uBACVC,MAAO,CAAC,qBAJET,mFAQM,IAAAU,EAAAP,KAEhBQ,MAAMR,KAAKS,MAAMJ,QAAQ,IACtBK,KAAK,SAAAC,GAAI,OAAIA,EAAKC,SAClBF,KAAK,SAAAE,GAAI,OAAIL,EAAKM,SAAS,CAACR,QAASO,EAAKE,SAC1CC,MAAM,SAACC,GAAD,OAASC,QAAQC,IAAI,yBAA0BF,KAI1D,IAAMG,EAAa,GAEbC,EAAapB,KAAKS,MAAMH,MAAMe,IAAI,SAACC,EAASC,GAAV,OAAgBf,MAAMc,GACzDZ,KAAK,SAAAc,GAAG,OAAIA,EAAIZ,SAChBF,KAAK,SAAAe,GACJN,EAAWO,KAAX,IAAAC,OAAoBF,EAAKG,WAAzB,OAAAD,OAAyCF,EAAKI,QAC9CV,EAAWW,WAGjBC,QAAQC,IAAIZ,GACPV,KAAK,SAAAuB,GAAmB1B,EAAKM,SAAS,CAACP,MAAMa,MAC7CJ,MAAM,SAACC,GAAD,OAASC,QAAQC,IAAI,UAAWF,sCAOpC,IACCF,EAASd,KAAKS,MAAdK,KAER,OACEoB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,UAAMtB,GACNoB,EAAAC,EAAAC,cAAA,UAAMpC,KAAKI,MAAMC,SACjB6B,EAAAC,EAAAC,cAAA,0BACIF,EAAAC,EAAAC,cAAA,UACIpC,KAAKI,MAAME,MAAMe,IAAI,SAACiB,EAAMf,GAAP,OACrBW,EAAAC,EAAAC,cAAA,MAAIG,IAAKhB,GACLe,eA/CQE,cCiBbC,EAnBO,SAAAC,GAAc,IAC5BC,EAD4BD,EAAXjB,KACDJ,IAAI,SAACuB,EAAMrB,GAC/B,OACEW,EAAAC,EAAAC,cAACS,EAAD,CACEN,IAAKK,EAAKE,IACVhC,KAAM8B,EAAK9B,KACXT,QAASuC,EAAKvC,QACdC,MAAOsC,EAAKtC,UAIlB,OACE4B,EAAAC,EAAAC,cAAA,WAASC,UAAU,iBAChBM,ICdDI,EAAc,CAClBC,cAAe,QAiBFC,EAZA,SAACxC,GACd,OACEyB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,MAAIc,MAAOH,GACTb,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,MAAIe,QAAS1C,EAAM2C,aAAnB,YCJOC,EARA,WACb,OAEInB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,UAAd,cCOSiB,EAVA,WACX,OACIpB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBCoBZkB,EAxBD,SAAC9C,GACb,OACEyB,EAAAC,EAAAC,cAAA,OACEC,UAAU,QACVa,MAAQzC,EAAM+C,WAAa,CAACC,QAAS,QAAU,CAACA,QAAS,QACzDN,QAAS1C,EAAM2C,aACblB,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,gDACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,uBACaF,EAAAC,EAAAC,cAAA,gCADb,kDAC2FF,EAAAC,EAAAC,cAAA,yBAD3F,QACwHF,EAAAC,EAAAC,cAAA,uBADxH,yEAGAF,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,KAAGsB,KAAK,+BAA+BC,OAAO,SAASC,IAAI,uBAA3D,WACA1B,EAAAC,EAAAC,cAAA,KAAGsB,KAAK,8BAA8BC,OAAO,SAASC,IAAI,uBAA1D,UACA1B,EAAAC,EAAAC,cAAA,KAAGsB,KAAK,+BAA+BC,OAAO,SAASC,IAAI,uBAA3D,eC6DGC,cAtEb,SAAAA,EAAYpD,GAAO,IAAAZ,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA6D,IACjBhE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA+D,GAAA1D,KAAAH,KAAMS,KACDL,MAAQ,CACXqB,KAAM,GACNqC,SAAU,GACVC,WAAW,GAGblE,EAAKmE,iBAAmBnE,EAAKmE,iBAAiBC,KAAtBnE,OAAAoE,EAAA,EAAApE,QAAAoE,EAAA,EAAApE,CAAAD,KARPA,mFAsBjB,IAXkB,IAAAU,EAAAP,KASZmE,EAAY,GAEV5C,EAAI,EAAGA,EAAI,GAAIA,IACrB4C,EAAUzC,KAAK,qCAAuCH,EAAE6C,YAG1D,IAAMC,EAAY,GAEZC,EAAaH,EAAU9C,IAAI,SAAAyB,GAAG,OAAItC,MAAMsC,GACzCpC,KAAK,SAAAc,GAAG,OAAIA,EAAIZ,SAChBF,KAAK,SAAAe,GAAI,OAAIA,EAAK8C,QAAQlD,IAAI,SAAAuB,GAAI,OAAIyB,EAAU3C,KAAKkB,SAG1Db,QAAQC,IAAIsC,GACT5D,KAAK,SAAA6D,GAAO,OAAIhE,EAAKM,SAAS,CAACiD,SAAUO,MACzCtD,MAAM,SAACC,GAAD,OAASC,QAAQC,IAAI,sBAAuBF,8CAItCwD,GACfxE,KAAKa,SAAS,CAACkD,WAAY/D,KAAKI,MAAM2D,6CAK/B,IAAAU,EACyBzE,KAAKI,MAA7B0D,EADDW,EACCX,SAAUC,EADXU,EACWV,UAClB,OACE7B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAACsC,EAAD,CACEtB,YAAapD,KAAKgE,mBAEpB9B,EAAAC,EAAAC,cAACuC,EAAD,MAEsB,IAApBb,EAASc,OACP1C,EAAAC,EAAAC,cAACyC,EAAD,MACA3C,EAAAC,EAAAC,cAAA,0BAAmB0B,EAASc,QAEhC1C,EAAAC,EAAAC,cAAC0C,EAAD,CACErD,KAAOqC,IAET5B,EAAAC,EAAAC,cAAC2C,EAAD,CACEvB,WAAYO,EACZX,YAAapD,KAAKgE,2BAhEZxB,aCEEwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpD,EAAAC,EAAAC,cAACmD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlF,KAAK,SAAAmF,GACjCA,EAAaC","file":"static/js/main.9160a98c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\n\n\n\nclass CardComponent extends Component {\n  constructor() {\n    super()\n    this.state = {\n      species: ['Fetching species...'],\n      films: ['Loading films...']\n    }\n  }\n\n  componentDidMount() {\n    // SPECIES //\n      fetch(this.props.species[0])\n        .then(resp => resp.json())\n        .then(json => this.setState({species: json.name}))\n        .catch((err) => console.log('ERROR FETCHING SPECIES', err))\n\n    // FILMS //\n\n    const filmsArray = [];\n\n    const fetchFilms = this.props.films.map((filmUrl, i) => fetch(filmUrl)\n        .then(res => res.json())\n        .then(data => {\n          filmsArray.push(`0${data.episode_id} - ${data.title}`);\n          filmsArray.sort();\n        }));\n\n    Promise.all(fetchFilms)\n        .then(promisesArray => { this.setState({films:filmsArray}) })\n        .catch((err) => console.log('error: ', err))\n\n  }\n\n\n\n\n  render() {\n    const { name } = this.props;\n\n    return (\n      <div className='Card'>\n        <h3>{ name }</h3>\n        <h4>{ this.state.species }</h4>\n        <div>Featured in:\n            <ul>\n              { this.state.films.map((film, i) => (\n                <li key={i}>\n                  { film }\n                </li>\n              ))}\n            </ul>\n        </div>\n      </div>\n    )\n  }\n\n}\n\nexport default CardComponent;\n","import React from 'react';\nimport CardComponent from './CardComponent';\nimport './App.css';\n\nconst CardContainer = ({ data }) => {\n  const cardList = data.map((user, i) => {\n    return (\n      <CardComponent\n        key={user.url}\n        name={user.name}\n        species={user.species}\n        films={user.films}\n      />\n    )}\n  )\n  return (\n    <section className='CardContainer'>\n      {cardList}\n    </section>\n    \n  );\n}\n\nexport default CardContainer;\n","import React from 'react';\nimport './App.css';\n\nconst navLiStyles = {\n  listStyleType: 'none'\n}\n\n\n\nconst NavBar = (props) => {\n  return (\n    <nav className='Nav'>\n      <ul style={navLiStyles}>\n        <li>Home</li>\n        <li>Search</li>\n        <li onClick={props.handleClick}>About</li>\n      </ul>\n    </nav>\n  )\n}\n\nexport default NavBar;\n","import React from 'react';\nimport './App.css';\n\nconst Header = () => {\n  return (\n\n      <h1 className='Header'>Star Wars</h1>\n\n  )\n}\n\nexport default Header;\n","import React from 'react';\nimport './App.css'\n\nconst Loader = () => {\n    return (\n        <div className=\"wrapper\">\n            <h3>Loading Cards...</h3>\n            <div className=\"spinner spinner-1\"></div>\n        </div>\n    );\n}\n\n\nexport default Loader;\n","import React from 'react';\nimport './App.css';\n\nconst About = (props) => {\n  return (\n    <div\n      className=\"About\"\n      style={ props.visibility ? {display: 'flex'} : {display: 'none'}}\n      onClick={props.handleClick}>\n        <h1>Star Wars App</h1>\n        <h3>A project for ZeroToMastery course</h3>\n        <hr/>\n        <p>\n          As part of <strong>Andrei Neagoie</strong>'s course, I built this simple page App, using <strong>ReactJS</strong> and <strong>SWAPI</strong>. Basic functionality at the moment. Hope to enhance it eventually...\n        </p>\n        <footer>\n          <h4>Follow me:</h4>\n          <div className=\"links\">\n            <a href=\"https://twitter.com/wbkpablo\" target=\"_blank\" rel=\"noopener noreferrer\">Twitter</a>\n            <a href=\"https://github.com/pablowbk\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub</a>\n            <a href=\"https://codepen.io/pablowbk/\" target=\"_blank\" rel=\"noopener noreferrer\">CodePen</a>\n          </div>\n        </footer>\n    </div>\n  )\n}\n\nexport default About;\n","import React, {Component} from 'react';\nimport CardContainer from './CardContainer';\nimport NavBar from './NavBar';\nimport Header from './Header';\nimport Loader from './Loader';\nimport About from './About';\nimport './App.css';\n\n// const api_data = [];\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      data: [],\n      api_data: [],\n      isVisible: false\n    };\n\n    this.handleAboutClick = this.handleAboutClick.bind(this);\n  }\n\n  componentDidMount() {\n    // OLD WAY - only gets back the first page results\n    // const url = 'https://swapi.co/api/people/';\n    //\n    // fetch(url)\n    //   .then(response => response.json())\n    //   .then(people => this.setState( { data: people.results } ))\n\n    // New, but messy, way...\n    const urlsArray = [];\n\n    for(let i = 1; i < 10; i++) {\n      urlsArray.push('https://swapi.co/api/people/?page=' + i.toString());\n    }\n\n    const charsData = [];\n\n    const charsFetch = urlsArray.map(url => fetch(url)\n        .then(res => res.json())\n        .then(data => data.results.map(user => charsData.push(user)))\n    );\n\n    Promise.all(charsFetch)\n      .then(results => this.setState({api_data: charsData}))\n      .catch((err) => console.log('ERROR, please check', err))\n\n  }\n\n  handleAboutClick(event) {\n    this.setState({isVisible: !this.state.isVisible});\n\n  }\n\n\n  render() {\n    const { api_data, isVisible } = this.state;\n    return (\n      <div className='App'>\n          <NavBar\n            handleClick={this.handleAboutClick}\n          />\n          <Header />\n          {\n            api_data.length === 0\n            ? <Loader /> //<h3>Loading Cards...</h3>\n            : <h3>Cards Count: { api_data.length }</h3>\n          }\n          <CardContainer\n            data={ api_data }\n          />\n          <About\n            visibility={isVisible}\n            handleClick={this.handleAboutClick}\n          />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}